version: '3.8'

services:
  # Frontend React Application
  web:
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    networks:
      - challenge-network
    volumes:
      - .:/app:cached  # ⭐️ MONTA TUDO
      - /app/node_modules
      - /app/apps/web/node_modules
    working_dir: /app/apps/web
    command: npm run dev

  # API Gateway - ATUALIZADO
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile  # ⭐️ Usar .dev
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
    networks:
      - challenge-network
    volumes:
      - .:/app:cached  # ⭐️ MONTA TUDO
      - /app/node_modules
      - /app/apps/api-gateway/node_modules
    working_dir: /app
    command: >
      sh -c "
        echo '📦 Building shared packages...' &&
        npx turbo build --filter=@repo/types... &&
        echo '🚀 Starting API Gateway...' &&
        cd apps/api-gateway && 
        npm run dev
      "
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # Auth Service - ATUALIZADO
  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile  # ⭐️ Usar .dev
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=development
    networks:
      - challenge-network
    volumes:
      - .:/app:cached  # ⭐️ MONTA TUDO
      - /app/node_modules
      - /app/apps/auth-service/node_modules
    working_dir: /app
    command: >
      sh -c "
        echo '📦 Building shared packages...' &&
        npx turbo build --filter=@repo/types... &&
        echo '🚀 Starting Auth Service...' &&
        cd apps/auth-service && 
        npm run dev
      "
    depends_on:
      db:
        condition: service_healthy

  # Tasks Service - ATUALIZADO
  tasks-service:
    container_name: tasks-service
    build:
      context: .
      dockerfile: ./apps/tasks-service/Dockerfile  # ⭐️ Usar .dev
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=development
    networks:
      - challenge-network
    volumes:
      - .:/app:cached  # ⭐️ MONTA TUDO
      - /app/node_modules
      - /app/apps/tasks-service/node_modules
    working_dir: /app
    command: >
      sh -c "
        echo '📦 Building shared packages...' &&
        npx turbo build --filter=@repo/types... &&
        echo '🚀 Starting Tasks Service...' &&
        cd apps/tasks-service && 
        npm run dev
      "
    depends_on:
      db:
        condition: service_healthy

  # Notifications Service - ATUALIZADO
  notifications-service:
    container_name: notifications-service
    build:
      context: .
      dockerfile: ./apps/notifications-service/Dockerfile  # ⭐️ Usar .dev
    ports:
      - '3004:3004'
    environment:
      - NODE_ENV=development
    networks:
      - challenge-network
    volumes:
      - .:/app:cached  # ⭐️ MONTA TUDO
      - /app/node_modules
      - /app/apps/notifications-service/node_modules
    working_dir: /app
    command: >
      sh -c "
        echo '📦 Building shared packages...' &&
        npx turbo build --filter=@repo/types... &&
        echo '🚀 Starting Notifications Service...' &&
        cd apps/notifications-service && 
        npm run dev
      "
    depends_on:
      rabbitmq:
        condition: service_healthy

  # Postgres Database
  db:
    image: postgres:17-alpine
    container_name: db
    ports:
      - '5432:5432'
    networks:
      - challenge-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: challenge_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - challenge-network
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  challenge-network:
    driver: bridge